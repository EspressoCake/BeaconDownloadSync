global('%downloadSyncLocation');


sub downloadAll {
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.io.File;

    local('$currentMetaPath');
    local('$rPath $rName $lPath $rId $rBid');

    $currentMetaPath = %downloadSyncLocation[data_query('localip')] . "/";
    
    $rPath = $1['path'];
    $rName = $1['name'];
    $lPath = $1['lpath'];
    $rID   = $1['id'];
    $rBid  = $1['bid'];  

    # Match a typical filesytem path, not UNC
    if ($rPath ismatch '^[A-Za-z]:.*$')
    {
        local('$currentBase');
        local('$pattern $matcher');

        $pattern = [ Pattern compile: "[A-Za-z](?=:)" ];
        $matcher = [ $pattern matcher: $rPath ];

        if ( [ $matcher find ] )
        {
            local('$currentFullLocalPath');

            $currentFullLocalPath =  binfo($rBid, "computer") . "_" . replace(binfo($rBid, "internal"), '\.', '_');
            $currentFullLocalPath .= "/" . [ $matcher group: 0 ];
            $currentFullLocalPath .= replace($rPath, [ $matcher group: 0 ] . ':', '');
            $currentFullLocalPath =  replace($currentFullLocalPath, '\\\\', '/') . $rName;

            # Create variable for Java object
            local('$path');
            $path = [ new File: $currentFullLocalPath ];

            if ( !-isDir ($currentMetaPath . [ $path getParent]) )
            {
                println("Making directory: " . ($currentMetaPath . [ $path getParent ]));
                mkdir($currentMetaPath . [ $path getParent ]);
            }
            
            if (size(@_) == 2)
            {
                if ($2 ismatch 'OVERWRITE')
                {
                    if (-isFile ($currentMetaPath . [ $path getParent ] . "/" . $rName))
                    {
                        sync_download($lPath, ($currentMetaPath . [ $path getParent ] . "/" . $rName), lambda({
                            println("Downloaded and overwrote: $1 [ $+ $rName $+ ]");
                            }, \$rName));
                    }
                    else
                    {
                        sync_download($lPath, ($currentMetaPath . [ $path getParent ] . "/" . $rName), lambda({
                            println("Downloaded: $1 [ $+ $rName $+ ]");
                            }, \$rName));
                    }
                }
            }
            else if ( !-isFile ($currentMetaPath . [ $path getParent ] . "/" . $rName) )
            {
                sync_download($lPath, ($currentMetaPath . [ $path getParent ] . "/" . $rName), lambda({
                    println("Downloaded: $1 [ $+ $rName $+ ]");
                }, \$rName));
            }
        }

    }
    else
    {
        if ($rPath ismatch '^\\\\.*$')
        {
            $rPath = replace($rPath, '\\\\\\\\', '');
            $rPath = replace($rPath, '\\\\', '/');
            
            local('$currentFullLocalPath');

            $currentFullLocalPath = $rPath . $rName;

            # Create variable for Java object
            local('$path');
            $path = [ new File: $currentFullLocalPath ];

            if ( !-isDir ($currentMetaPath . [ $path getParent]) )
            {
                mkdir($currentMetaPath . [ $path getParent ]);
            }

            if (size(@_) == 2)
            {
                if ($2 ismatch 'OVERWRITE')
                {
                    if (-isFile ($currentMetaPath . [ $path getParent ] . "/" . $rName))
                    {
                        sync_download($lPath, ($currentMetaPath . [ $path getParent ] . "/" . $rName), lambda({
                            println("Downloaded and overwrote: $1 [ $+ $rName $+ ]");
                            }, \$rName));
                    }
                    else
                    {
                        sync_download($lPath, ($currentMetaPath . [ $path getParent ] . "/" . $rName), lambda({
                            println("Downloaded: $1 [ $+ $rName $+ ]");
                        }, \$rName));
                    }
                }
            }
            else if ( !-isFile ($currentMetaPath . [ $path getParent ] . "/" . $rName) )
            {
                sync_download($lPath, ($currentMetaPath . [ $path getParent ] . "/" . $rName), lambda({
                    println("Downloaded: $1 [ $+ $rName $+ ]");
                }, \$rName));
            }
        }
    }
}


alias sync_beacon_downloads {
    local('$download');
    local('@currentReturnString');
    local('@currentQueue');

	if (data_query('localip') !in (keys(%downloadSyncLocation)))
	{
		berror($1, "No download location set, you must run set_sync_location first!");
		return;
	}

    foreach $download (downloads())
    {
        if ($download['bid'] ismatch $1)
        {
            if (size(@_) >= 2)
            {
                if (('.*' . lc($download['path'] . $download['name'])) ismatch ('.*' . lc($2) . '.*$'))
                {
                    @currentReturnString = add(@currentReturnString, ($download['path'] . $download['name']));
                    @currentQueue = add(@currentQueue, $download);
                }
            }
            else
            {
                @currentReturnString = add(@currentReturnString, ($download['path'] . $download['name']));
                @currentQueue = add(@currentQueue, $download);
            }
        }
    }

    if (size(@currentReturnString) >= 1)
    {
        local('$downloadQueue');

        blog($1, "Current Downloads in Queue:\n\t" . join("\n\t", sorta(@currentReturnString)));

        foreach $downloadQueue (@currentQueue)
        {
            if (size(@_) == 3)
            {
                if ($3 ismatch 'OVERWRITE')
                {
                    downloadAll($downloadQueue, 'OVERWRITE');
                }
                else
                {
                    downloadAll($downloadQueue);
                }
            }
            downloadAll($downloadQueue);
        }

        show_message("Downloads and directories for beacon synced.");
    }
    else
    {
        berror($1, "No downloads matching criteria found.");
    }
}


alias show_beacon_downloads {
    local('$download');
    local('@currentReturnString');

    foreach $download (downloads())
    {
        if ($download['bid'] ismatch $1)
        {
            if (size(@_) == 2)
            {
                if ((lc($download['path'] . $download['name'])) ismatch ('.*' . lc($2) . '.*$'))
                {
                    @currentReturnString = add(@currentReturnString, ($download['path'] . $download['name']));
                }
            }
            else
            {
                @currentReturnString = add(@currentReturnString, ($download['path'] . $download['name']));
            }
        }
    }

    if (size(@currentReturnString) >= 1)
    {
        blog($1, "Current Downloads Matching Criteria in Current Beacon:\n\t" . join("\n\t", sorta(@currentReturnString)));
    }
    else
    {
        berror($1, "No downloads matching criteria found.");
    }
}


alias sync_all_beacon_downloads {
    local('$download');
    local('@currentReturnString');
    local('@currentQueue');

	if (data_query('localip') !in (keys(%downloadSyncLocation)))
	{
		berror($1, "No download location set, you must run set_sync_location first!");
		return;
	}

    foreach $download (downloads())
    {
        if (size(@_) >= 2)
        {
            if (('.*' . lc($download['path'] . $download['name'])) ismatch ('.*' . lc($2) . '.*$'))
            {
                @currentReturnString = add(@currentReturnString, ($download['path'] . $download['name']));
                @currentQueue = add(@currentQueue, $download);
            }
        }
        else
        {
            @currentReturnString = add(@currentReturnString, ($download['path'] . $download['name']));
            @currentQueue = add(@currentQueue, $download);
        }
    }

    if (size(@currentReturnString) >= 1)
    {
        local('$downloadQueue');

        blog($1, "Current Downloads in Queue:\n\t" . join("\n\t", sorta(@currentReturnString)));

        foreach $downloadQueue (@currentQueue)
        {
            if (size(@_) == 3)
            {
                if ($3 ismatch 'OVERWRITE')
                {
                    downloadAll($downloadQueue, 'OVERWRITE');
                }
                else
                {
                    downloadAll($downloadQueue);
                }
            }

            downloadAll($downloadQueue);
        }

        show_message("Downloads and directories for beacon synced.");
    }
    else
    {
        berror($1, "No downloads matching criteria found.");
    }
}


alias search_all_beacon_downloads {
    local('$download');
    local('$currentRPath');
    local('@currentReturnString');

    foreach $download (downloads())
    {
        if (size(@_) == 2)
        {
            if ((lc($download['path'] . $download['name'])) ismatch ('.*' . lc($2) . '.*$'))
            {
                @currentReturnString = add(@currentReturnString, (binfo(($download['bid']), "internal") . "@" . binfo($download['bid'], "pid") . "\t->\t" . $download['path'] . $download['name']));
            }
        }
        else
        {
            @currentReturnString = add(@currentReturnString, (binfo(($download['bid']), "internal") . "@" . binfo(($download['bid']), "pid") . "\t->\t" . $download['path'] . $download['name']));
        }
    }

    if (size(@currentReturnString) >= 1)
    {
        blog($1, "Current Downloads Matching Criteria:\n\t" . join("\n\t", sorta(@currentReturnString)));
    }
    else
    {
        berror($1, "No downloads matching criteria found.");
    }
}


alias set_sync_location {
	local('$syncRootPath');

	if (size(@_) != 2)
	{
		berror($1, "You must specify a local path to download a path tree to.");
		return;
	}

	if (!-isDir $2)
	{
		berror($1, "The path you specified does not exist on the system. You must create it first.");
		return;
	}

	%downloadSyncLocation[data_query('localip')] = $2;
	blog($1, "Set download location root for TeamServer: " . %downloadSyncLocation[data_query('localip')]);
}


alias show_sync_location {
	if (data_query('localip') !in (keys(%downloadSyncLocation)))
	{
		berror($1, "No download location set for this TeamServer.");
		return;
	}
	else
	{
		blog($1, "Download location for TeamServer: " . %downloadSyncLocation[data_query('localip')]);
	}
}


# Registration of alisases for usage within Beacons
beacon_command_register("show_sync_location", "Shows sync location for downloads.", "Usage: show_sync_location");

beacon_command_register("set_sync_location", "Set the root path for synced downloads", "Usage: set_sync_location path_to_base_directory");

beacon_command_register("show_beacon_downloads", "Show all Downloads associated with your current Beacon.", "Usage: show_beacon_downloads [optional string to match]");

beacon_command_register("sync_beacon_downloads", "Sync all Downloads from current Beacon.", "Usage: sync_beacon_downloads [optional string to match] [OVERWRITE]");

beacon_command_register("sync_all_beacon_downloads", "Sync all Downloads.", "Usage: sync_all_beacon_downloads [optional string to match] [OVERWRITE]");

beacon_command_register("search_all_beacon_downloads", "Show all Downloads", "Usage: search_all_beacon_downloads [optional string to match]");
